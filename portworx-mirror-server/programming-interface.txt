
	The kernel test script relies can invoke different drivers
(for lack of a better term) for different distributions and, potentially,
different container systems.


Top level programs:

	./test_kernel_pkgs [--distribution=dist] [--container_system=container_system] pxfuse_src_directory pkg_file [pkg_file...]

		Based on values of distribution and container_system,
		test that the contents of pxfuse_src_directory compiles.

	./test_kernels_in_mirror  --distribution=dist --container_system=container_system pxfuse_dir mirror_dir [log_dir]

		Invokes test_kern_pkgs function, described below, to
		test all kernels in the given directory tree


	test_kernel_pkgs_log_results pxfuse_src_directory log_dir_parent log_dir_suffix pkg_file [pkg_file...]
		If $log_dir_parent/$log_dir_suffix/done exists, do nothing.
		Otherwise, invoke test_kernel_pkgs, logging output in
		build.log (in that directory).  On success, stores the
		resultant px.ko in the same directory as build.log.
		On completion (succes or failure), creates the empty
		file "done" in that directory.

Distribution interface:

	The distribution interface uses the $distribution shell global
	variable to select the distribution type.  Currently, "ubuntu",
	"debian" and "centos" are supported.  Every shell function func
	listed below is just a wrapper that invokes func_$distribution.

	pkg_files_to_kernel_dir - Extract the kernel directory string
				  from the given list of kernel header
				  packages.

	pkg_files_to_names	- Given a list of package files (outside
				  of the container) output a list of the
				  package names that can be passed to
				  uninstall_pkgs

	install_pkg_files	- Install the .deb or .rpm files (which
				  have already been copied into the
				  container)

        install_pkgs		- Install packages over the network by name

	uninstall_pkgs	        - Uninstall the specified package names.

	pkgs_update		- Do something like
				  "apt-get update" or "yum update".
				  Perhaps unnecessary.

	walk_mirror dir command [args..]
				- Descend into subdirectories of a
				  mirror tree, finding the relevant
				  kernel packages and invoking
				  comand with args followed by a
				  recommended logging subdirectory,
				  followed by package files that
				  refers to a single set of kernel headers.
				  Typically command
				  and args is something like
				  "test_kernel_pkgs_log_results $pxfuse_src_dir $log_dir_top"
				  In the future, this function might be
				  moved to a separate file related to
				  mirror operations.




Container interface:

	The container interface uses the $container_system shell global
	variable to select the container type.  Currently "docker" is the
	only implemented driver, but "lxc" or "chroot" might come later.

	Every shell function func listed below is just a wrapper that
	invokes func_$container_system.

	start_containter	- Takes no arguments.  Makes sure a container
				  is available for in_container.  Uses the
				  the $distribution shell variables to which
				  container template to use.

	in_container shell_command - Run the shell command in the container.
		     		   standard input, standard output, standard
				   error and exit code are passed through.

	stop_container		- Takes no argument.  Shut down the container
				  if necessary.  Actually, for many
				  container systems it is pretty harmless
				  to leave this as a no-op.

TODO:
	Commands to compare list of old a new kernel compilations, and
	notify people about new compilation results.
