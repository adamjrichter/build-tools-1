
	The kernel test script relies can invoke different drivers
(for lack of a better term) for different distributions and, potentially,
different container systems.


Top level scripts, installed in /usr/local/bin:

	Each of the following scripts accepts a common set of options,
	listed below.
	

	pwx_test_kernel_pkgs [options] pkg_files...
	pwx_test_kernel_pkgs_one_container.sh [options] pkg_files...

 	    pwx_test_kernel_pkgs iterates through the operating system
	    releases suported by the specified opreating system distribution
	    (for example, if "ubuntu" is the distribution, "xenial",
	    "yakkety", etc. are the releases), terminating as soon as
	    pwx_test_kernels_pkgs_one_container.sh returns success (exit
	    code of zero).  pwx_test_kernel_pkgs_one_container.sh is
	    the script that actually does the work of running the test.
	    It is installed in /usr/local/share/pwx_test_kernel_pkgs/scripts.
	    pwx_test_kernel_pkgs is installed in /usr/local/bin.

	    Options:
		
		--arch=architecture            [default: amd64]
		--containers=container_system  [default: docker]
		--distribution=dist            [default: ubuntu]
		--force
		--help
		--leave-containers-running
		--logdir=logdir                [default: based on distribution]
		--pfxuse=pxfuse_src_dir        [default: download tempoary
					        directory from github]
		--releases=dist_release        [default: based on distribution]

            pwx_test_kernel_pkgs_one_releaese.sh accepts the additional
	    option "--release=..." and ignores "--releases=....".  In this
	    way, pwx_test_kenrel_pkgs can tell
	    pwx_test_kernel_pkgs_one_release.sh which release to test,
	    withing need to delete anything from its command line arguments.

	    Description:

		If logdir/done exists and "--force" was not specified,
		then do nothing.

		Otherwise, based on values of distribution and
		container_system, test that the contents of
		pxfuse_src_dir compiles.  Record the results in
		logdir/build.log. On success, also save the resultant
		px.ko file in logdir.

		If "--leave-containers-running" is specified,
		stop_containers() will not be called on each container
		when the test ends.  This allows tests of multiple
		kernel packages to be run in sequence more quickly, as
		it currently takes, for example, about seven seconds on
		mirror.portworx.com to stop and restart Debian Stretch
	        container.

		Returns exit code 0 on success, non-zero on any failure.

DESCRIPTION OF INTERNAL FUNCTIONS


    Distribution interface (defined by sourcing
    /usr/local/share/pwx_test_kernel_pkgs/distro_driver.sh ):

	The distribution interface uses the $distribution shell global
	variable to select the distribution type.  Currently, "ubuntu",
	"debian" and "centos" are supported.  Every shell function func
	listed below is just a wrapper that invokes func_$distribution.

	dist_releases      -       Print a list of available releases
				   (e.g., "jessie", "stretch" for Debian),
				   in the order in which they should be
				   tried.  The first one is used as the
				   default by init_container drivers.

	dist_init_container	-  Install any needed initial
				   packages in the initial container.

	dist_start_container	-  Called every time a container is
				   started (not just created from scratch).
				   This is currently used with
				   Debian-based container to check and
				   record which versions of "apt-get"
				   command line options are accepted.
				   This function is called by the container
				   driver, and is called before
				   dist_init_container, so that
				   dist_init_container can rely on the
				   results of this function.

	pkg_files_to_kernel_dirs - Extract the kernel directory strings
				  from the given list of kernel header
				  packages.

	pkg_files_to_names	- Given a list of package files (outside
				  of the container) output a list of the
				  package names that can be passed to
				  uninstall_pkgs

	install_pkgs_dir dir	- Install all of the .deb or .rpm files
			  	  that are located in directory dir
				  in the container

        install_pkgs		- Install packages over the network by name

	uninstall_pkgs	        - Uninstall the specified package names.

	pkgs_update		- Do something like "apt-get update" or
				 "yum update".  Perhaps unnecessary.

	test_kernel_pkgs_func pxfuse_source_dir results_logdir make_args pkgs
			       - This is the main function of
				  ./test_kernel_pkgs.  On success, it
				  copies px.ko into the directory
				  $results_logdir.

				  If the function was able to execute
				  at least one test, regardless of
				  whether the test succeeded, it sets
				  the global variable ran_test to
				  "true".  This is used in determining
			 	  whether to write the "done" file,
				  after running potentially multiple
				  tests.

	dist_clean_up_container - Called after test is run to remove
				  any remaining distribution-specific
				  residue.

    Container interface (defined by sourcing
    /usr/local/share/pwx_test_kernel_pkgs/container_driver.sh ):

	The container interface uses the $container_system shell global
	variable to select the container type.  Currently "lxc" is the
	only implemented driver, but "docker" or "chroot" might come later.

	Every shell function func listed below is just a wrapper that
	invokes func_$container_system.

	The container interface is at a lower level than the distribution
	distribution driver functions.  It never directly calls such
	functions, which is why, for example, the start_container
	function takes an argument that is the function to be called
	to do the distrbitution-specific initialization of the container.

	start_containter [--release=dist_release] init_command [args...]
			 	  Makes sure a container
				  is available for in_container.  Uses the
				  the $distribution shell variables to which
				  container template to use.  If a new
				  container had to be created, invoke
				  init_command [args...] to do the
				  distribution-specific initialization.
				  If "--release=dist_release" is specified,
				  use that release of the Linux distribution
				  instead of the default.

	in_container shell_command - Run the shell command in the container.
		     		   standard input, standard output, standard
				   error and exit code are passed through.

	stop_container		- Takes no argument.  Shut down the container
				  if necessary.  Actually, for many
				  container systems it is pretty harmless
				  to leave this as a no-op.

Directories on host:

	/var/lib/pwx-mirror	- Contains crontab.txt

	/usr/local/share/pwx_test_kernel_pkgs/scripts
		- All script libraries used by portworx-test-kernels-in-mirror
